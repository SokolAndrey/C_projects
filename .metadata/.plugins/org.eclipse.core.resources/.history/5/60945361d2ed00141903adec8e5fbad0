/*
 ============================================================================
 Name        : HTTPServer.c
 Author      : Andrei
 Version     :
 Copyright   : Your copyright notice
 Description : Hello World in C, Ansi-style
 ============================================================================
 */
#include<sys/socket.h>
#include<sys/types.h>
#include<stdio.h>
#include<string.h>
#include<stdlib.h>
#include<unistd.h>
#include<errno.h>
#include <netinet/in.h>

void server();

int main(int argc, char *argv[]) {
	int port_number = 8080;
	if (argc > 1) {
		port_number = atoi(argv[2]);
	}
	server(port_number);

	return 0;
}

void server(int port_number) {
	int sock, connected, pid, true = 1;
	char send_data[1024], recv_data[1024];

	struct sockaddr_in server_addr, client_addr;
	int cli_size;

	if ((sock = socket(AF_INET, SOCK_STREAM, 0)) == -1) {
		perror("Socket");
		exit(1);
	}

	if (setsockopt(sock, SOL_SOCKET, SO_REUSEADDR, &true, sizeof(int)) == -1) {
		perror("Setsockopt");
		exit(1);
	}

	server_addr.sin_family = AF_INET;
	server_addr.sin_port = htons(port_number);
	server_addr.sin_addr.s_addr = htonl(INADDR_ANY);
	bzero(&(server_addr.sin_zero), 8);
	memset(&(server_addr.sin_zero), 0, 8);
	if (bind(sock, (struct sockaddr *) &server_addr, sizeof(struct sockaddr))
			== -1) {
		perror("Unable to bind");
		exit(1);
	}

	if (listen(sock, 5) == -1) {
		perror("Listen");
		exit(1);
	}

	printf("\n\nMyHTTPServer waiting on port %d", port_number);
	fflush(stdout);

	cli_size = sizeof(struct sockaddr_in);
	while (1) {
		connected = accept(sock, (struct sockaddr *) &client_addr, &cli_size);
		if (connected < 0) {
			perror("Error on accept");
		}
		pid = fork();
		if (pid < 0) {
			perror("Error on fork");
		}
		if (pid == 0) {
			// do useful work
			close(sock);
			char kk[1000];
			recv(connected, kk, sizeof(kk), 0);
			printf("\n Received:%s", kk);

			char xx[9999];
			strcpy(xx,
					"HTTP/1.1 200 OK\nContent-length: 47\nContent-Type: text/html\n\n<html><body><H1>Hello World</H1></body></html>");

			int c = send(connected, &xx, sizeof(xx), 0);
			printf("\nSTATUS:%d", c);

			printf("\nSent : %s\n", xx);

		} else {
			// close socket in parent
			close(connected);
		}
		// close socket
	}
	close(sock);
}
